// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearchServiceClient is the client API for SearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchServiceClient interface {
	SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error)
	SayHelloClientStream(ctx context.Context, opts ...grpc.CallOption) (SearchService_SayHelloClientStreamClient, error)
	SayHelloServerStream(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (SearchService_SayHelloServerStreamClient, error)
	SayHelloBidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (SearchService_SayHelloBidirectionalStreamClient, error)
}

type searchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchServiceClient(cc grpc.ClientConnInterface) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (*SayHelloResponse, error) {
	out := new(SayHelloResponse)
	err := c.cc.Invoke(ctx, "/search.SearchService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) SayHelloClientStream(ctx context.Context, opts ...grpc.CallOption) (SearchService_SayHelloClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SearchService_ServiceDesc.Streams[0], "/search.SearchService/SayHelloClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchServiceSayHelloClientStreamClient{stream}
	return x, nil
}

type SearchService_SayHelloClientStreamClient interface {
	Send(*SayHelloRequest) error
	CloseAndRecv() (*SayHelloResponse, error)
	grpc.ClientStream
}

type searchServiceSayHelloClientStreamClient struct {
	grpc.ClientStream
}

func (x *searchServiceSayHelloClientStreamClient) Send(m *SayHelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *searchServiceSayHelloClientStreamClient) CloseAndRecv() (*SayHelloResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SayHelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *searchServiceClient) SayHelloServerStream(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (SearchService_SayHelloServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SearchService_ServiceDesc.Streams[1], "/search.SearchService/SayHelloServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchServiceSayHelloServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SearchService_SayHelloServerStreamClient interface {
	Recv() (*SayHelloResponse, error)
	grpc.ClientStream
}

type searchServiceSayHelloServerStreamClient struct {
	grpc.ClientStream
}

func (x *searchServiceSayHelloServerStreamClient) Recv() (*SayHelloResponse, error) {
	m := new(SayHelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *searchServiceClient) SayHelloBidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (SearchService_SayHelloBidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &SearchService_ServiceDesc.Streams[2], "/search.SearchService/SayHelloBidirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchServiceSayHelloBidirectionalStreamClient{stream}
	return x, nil
}

type SearchService_SayHelloBidirectionalStreamClient interface {
	Send(*SayHelloRequest) error
	Recv() (*SayHelloResponse, error)
	grpc.ClientStream
}

type searchServiceSayHelloBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *searchServiceSayHelloBidirectionalStreamClient) Send(m *SayHelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *searchServiceSayHelloBidirectionalStreamClient) Recv() (*SayHelloResponse, error) {
	m := new(SayHelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SearchServiceServer is the server API for SearchService service.
// All implementations must embed UnimplementedSearchServiceServer
// for forward compatibility
type SearchServiceServer interface {
	SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error)
	SayHelloClientStream(SearchService_SayHelloClientStreamServer) error
	SayHelloServerStream(*SayHelloRequest, SearchService_SayHelloServerStreamServer) error
	SayHelloBidirectionalStream(SearchService_SayHelloBidirectionalStreamServer) error
	mustEmbedUnimplementedSearchServiceServer()
}

// UnimplementedSearchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSearchServiceServer struct {
}

func (UnimplementedSearchServiceServer) SayHello(context.Context, *SayHelloRequest) (*SayHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSearchServiceServer) SayHelloClientStream(SearchService_SayHelloClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloClientStream not implemented")
}
func (UnimplementedSearchServiceServer) SayHelloServerStream(*SayHelloRequest, SearchService_SayHelloServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloServerStream not implemented")
}
func (UnimplementedSearchServiceServer) SayHelloBidirectionalStream(SearchService_SayHelloBidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloBidirectionalStream not implemented")
}
func (UnimplementedSearchServiceServer) mustEmbedUnimplementedSearchServiceServer() {}

// UnsafeSearchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchServiceServer will
// result in compilation errors.
type UnsafeSearchServiceServer interface {
	mustEmbedUnimplementedSearchServiceServer()
}

func RegisterSearchServiceServer(s grpc.ServiceRegistrar, srv SearchServiceServer) {
	s.RegisterService(&SearchService_ServiceDesc, srv)
}

func _SearchService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.SearchService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).SayHello(ctx, req.(*SayHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_SayHelloClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SearchServiceServer).SayHelloClientStream(&searchServiceSayHelloClientStreamServer{stream})
}

type SearchService_SayHelloClientStreamServer interface {
	SendAndClose(*SayHelloResponse) error
	Recv() (*SayHelloRequest, error)
	grpc.ServerStream
}

type searchServiceSayHelloClientStreamServer struct {
	grpc.ServerStream
}

func (x *searchServiceSayHelloClientStreamServer) SendAndClose(m *SayHelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *searchServiceSayHelloClientStreamServer) Recv() (*SayHelloRequest, error) {
	m := new(SayHelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _SearchService_SayHelloServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SayHelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchServiceServer).SayHelloServerStream(m, &searchServiceSayHelloServerStreamServer{stream})
}

type SearchService_SayHelloServerStreamServer interface {
	Send(*SayHelloResponse) error
	grpc.ServerStream
}

type searchServiceSayHelloServerStreamServer struct {
	grpc.ServerStream
}

func (x *searchServiceSayHelloServerStreamServer) Send(m *SayHelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SearchService_SayHelloBidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SearchServiceServer).SayHelloBidirectionalStream(&searchServiceSayHelloBidirectionalStreamServer{stream})
}

type SearchService_SayHelloBidirectionalStreamServer interface {
	Send(*SayHelloResponse) error
	Recv() (*SayHelloRequest, error)
	grpc.ServerStream
}

type searchServiceSayHelloBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *searchServiceSayHelloBidirectionalStreamServer) Send(m *SayHelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *searchServiceSayHelloBidirectionalStreamServer) Recv() (*SayHelloRequest, error) {
	m := new(SayHelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SearchService_ServiceDesc is the grpc.ServiceDesc for SearchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "search.SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _SearchService_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloClientStream",
			Handler:       _SearchService_SayHelloClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHelloServerStream",
			Handler:       _SearchService_SayHelloServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SayHelloBidirectionalStream",
			Handler:       _SearchService_SayHelloBidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "src/proto/search.proto",
}
